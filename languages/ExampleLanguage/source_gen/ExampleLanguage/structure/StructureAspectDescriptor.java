package ExampleLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(2);
  /*package*/ final ConceptDescriptor myConceptConcept = createDescriptorForConcept();
  /*package*/ final ConceptDescriptor myConceptContainerOfConcepts = createDescriptorForContainerOfConcepts();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptConcept.getId(), 0);
    myIndexMap.put(myConceptContainerOfConcepts.getId(), 1);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptConcept, myConceptContainerOfConcepts);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptConcept;
      case 1:
        return myConceptContainerOfConcepts;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForConcept() {
    return new ConceptDescriptorBuilder("ExampleLanguage.structure.Concept", MetaIdFactory.conceptId(0xbee5390ae3884efeL, 0xb60e01826621a7c4L, 0x16e43e223d92d736L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.mpsutil.multilingual.concept.structure.IMultilingualNamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xd0fe2e609f9c4d3cL, 0x94aade9257b67a6dL, 0x22d74031dcf68a1dL)).sourceNode(new SNodePointer("r:f95ea2ba-56f8-4b20-be45-874be12725af(ExampleLanguage.structure)", "1649511680307287862")).create();
  }
  private static ConceptDescriptor createDescriptorForContainerOfConcepts() {
    return new ConceptDescriptorBuilder("ExampleLanguage.structure.ContainerOfConcepts", MetaIdFactory.conceptId(0xbee5390ae3884efeL, 0xb60e01826621a7c4L, 0x16e43e223d92de75L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x16e43e223d92de83L, "concepts", MetaIdFactory.conceptId(0xbee5390ae3884efeL, 0xb60e01826621a7c4L, 0x16e43e223d92d736L), true, true, false, new SNodePointer("r:f95ea2ba-56f8-4b20-be45-874be12725af(ExampleLanguage.structure)", "1649511680307289731"))).children(new String[]{"concepts"}, new boolean[]{true}).rootable().sourceNode(new SNodePointer("r:f95ea2ba-56f8-4b20-be45-874be12725af(ExampleLanguage.structure)", "1649511680307289717")).create();
  }
}
